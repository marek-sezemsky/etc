#!/bin/bash
#
# ~/etc/install [DestDir]
#
set -e
set -u
#set -x

sourcedir="$(dirname $0)"
destdir="${1:-$HOME}"

echo
echo "Installing $sourcedir into $destdir"
echo

#
# install explicitly listed symlinks from ~/etc
#
symlinks=(
    bash_aliases
    bash_logout
    bash_profile
    bash_ps1
    bashrc
    git-prompt.sh
    gitignore_global
    mplayer
    rpmmacros
    screenrc
    toprc
    vim
    vimrc
)
echo "Install top-level symlinks ..."
for link in ${symlinks[@]}; do
    src="$sourcedir/${link}"
    dst="$destdir/.${link}"
    if [ -e "$dst" ] && [ ! -L "$dst" ]
    then
        mv -v "$dst" "$dst~"
    fi
    ln -nsfv "$src" "$dst"
done
echo

#
# install any ~/etc/local.d/****/bashrc_local_*
#
sourcedir="$sourcedir/local.d/"
echo "Install bashrc_local_* symlinks ..."
for link in $(find $sourcedir -type f -name 'bashrc_local_*')
do
    src="${link}"
    dst="$destdir/.$(basename $link)"
    if [ -e "$dst" ] && [ ! -L "$dst" ]
    then
        mv -v "$dst" "$dst~"
    fi
    ln -nsfv "$src" "$dst"
done
echo

#
# Set git configuration
#
if git --version &>/dev/null
then
    echo "Configuring global Git configuration ..."
    gitconfig="git config --replace --global"

    # behavior
    $gitconfig advice.detachedHead false
    $gitconfig color.ui true
    $gitconfig core.excludesfile "~/.gitignore_global"
    $gitconfig diff.submodule log
    $gitconfig log.decorate short
    $gitconfig push.default simple
    $gitconfig pretty.onelinedate "tformat:%C(auto)%h %C(black)%C(bold)%ci%C(auto)%d %C(reset)%s"

    # aliases
    $gitconfig alias.br "branch"
    $gitconfig alias.ci "commit --verbose"
    $gitconfig alias.co "checkout"
    $gitconfig alias.cp "cherry-pick"
    $gitconfig alias.d  "diff"
    $gitconfig alias.dc "diff --cached"
    $gitconfig alias.l  "log --oneline --graph --decorate"
    $gitconfig alias.s  "status --short --branch"

    echo "Review changes with: git config --global --list"
else
    echo "Warning: No git found?!" >&2
fi
echo

#
# Secure sensitive info
# (files that do or may contain passwords/tokens/etc)
#
echo "Securing sensitive files ..."
secrets="
    .netrc
    .bash_history
    "
for secret in $secrets; do
    if [ -f "$destdir/$secret" ]; then
        chmod -v 0600 "$destdir/$secret"
    fi
done
