# this file contains (updated) base perl.snippets. Additional snippets are
# stored in ./perl/*

# #!/usr/bin/perl
snippet #perl
	#!/usr/bin/perl

	use 5.008;
	use strict;
	use warnings;

# Hash Pointer
snippet .
	 =>
# qw
snippet qw
	qw( ${1} )

# Conditional
snippet if
	if ( ${1} ) {
		${2:# body...}
	}
	${3}
# Conditional if..else
snippet ife
	if ( ${1} ) {
		${2:# body...}
	}
	else {
		${3:# else...}
	}
# Conditional if..elsif..else
snippet ifee
	if ( ${1} ) {
		${2:# body...}
	}
	elsif ( ${3} ) {
		${4:# elsif...}
	}
	else {
		${5:# else...}
	}
# Conditional One-line
snippet xif
	${1:expression} if ${2:condition};${3}
# Unless conditional
snippet unless
	unless ( ${1} ) {
		${2:# body...}
	}
# Unless conditional One-line
snippet xunless
	${1:expression} unless ${2:condition};${3}
# Try/Except
snippet eval
	eval {
		${1:# do something risky...}
	};
	if ( $@ ) {
		${2:# handle failure...}
	}
# While Loop
snippet wh
	while ( ${1} ) {
		${2:# body...}
	}
# While Loop One-line
snippet xwh
	${1:expression} while ${2:condition};${3}
# C-style For Loop
snippet cfor
	for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4:# body...}
	}
# For loop one-line
snippet xfor
	${1:expression} for @${2:array};${3}
# Foreach Loop
snippet for
	foreach my $${1:x} ( ${2:@array} ) {
		${3:# body...}
	}
# Foreach Loop One-line
snippet fore
	${1:expression} foreach @${2:array};${3}
# Subroutine
snippet sub
	# ${1:name} - ${2:description}
	sub $1 # {{{
	{
		my (%args) = @_;

		return;
	} # }}}

# Subroutine with POD
snippet subp
	=item C<${1:name}> I<${2:ARGS}>

	${3:Do something and return value.}

	=cut

	sub $1 # {{{
	{
		my (${4:%args}) = @_;
		trace();
		assert(${5:%args});
		${6}

		return;
	} # }}}

# Subroutine with comments
snippet subc
	#
	# ${1:name} ${2:ARGS}
	#
	# ${3:Do something and return value.}
	#
	sub $1 # {{{
	{
		my (${4:%args}) = @_;
		trace();
		assert(${5:%args});
		${6}

		return;
	} # }}}

# Snippet to execute a command in a simple form
snippet run basic run()
	# ...
	my %${1:what} = (
		cmd => [ ${2:cmd} ],
		arg => [ ${3:arg1 arg2} ],
	);
	run(%$1)
		or throw("Command failed");

	${4}


# Snippet to execute a command in advanced form
snippet run advanced run() (with output capture)
	my (@${4:output}, @errors);
	my %${1:what} = (
		cmd => [ ${2:cmd} ],
		arg => [ ${3:arg1 arg2} ],
		out => \@$4,
		err => \@errors,
	);
	run(%$1)
		or throw("Command failed");

	${5:# process output}


