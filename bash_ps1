# .bash_ps1

# PS1 color for capable terminals only
__colors="$(tput colors 2>/dev/null)"
if [ "${__colors:-0}" -ge "8" ]
then
    __c_off="\[$(tput sgr0)\]"

    __c_bold="\[$(tput bold)\]"
    __c_underline="\[$(tput smul)\]"

    __c_black="\[$(tput setaf 0)\]"
    __c_red="\[$(tput setaf 1)\]"
    __c_green="\[$(tput setaf 2)\]"
    __c_yellow="\[$(tput setaf 3)\]"
    __c_blue="\[$(tput setaf 4)\]"
    __c_magenta="\[$(tput setaf 5)\]"
    __c_cyan="\[$(tput setaf 6)\]"
    __c_white="\[$(tput setaf 7)\]"

else
    __c_off=""

    __c_bold=""
    __c_underline=""

    __c_black=""
    __c_red=""
    __c_green=""
    __c_yellow=""
    __c_blue=""
    __c_magenta=""
    __c_cyan=""
    __c_white=""
fi

__ps1_update() # set PS1 quick and dirty
{
    # Call this in PROMPT_COMMAND to update PS1:
    # (view) (master=) user@host:~
    # !255 $

    local retval=$?
    local titlebar

    # color configuration
    if [ ${EUID:-1} -eq 0 ]
    then
        local usercolor="${__c_bold}${__c_red}"
        local prompt="#"
    else
        local usercolor="${__c_bold}${__c_green}"
        local prompt="\$"
    fi
    local pathcolor="${__c_bold}${__c_yellow}"
    local timecolor="${__c_cyan}${__c_underline}"
    local failurecolor="${__c_bold}${__c_red}"
    local warningcolor="${__c_bold}${__c_yellow}"
    local successcolor="${__c_bold}${__c_green}"
    local envcolor="${__c_bold}${__c_blue}"
    local gitcolor="${__c_bold}${__c_cyan}"
    local dim="${__c_bold}${__c_black}"

    # make a room (empty line)
    PS1="\n"

    # reset tput and set title for xterm: 'user@host:workdir'
    # http://unix.stackexchange.com/questions/14113/
    titlebar='\[\e]0;\u@\h:\w\a\]'
    PS1="${__c_off}${titlebar}\n"

    # --- '# envs ..."
    local envs=""
    if declare -f __git_ps1 >/dev/null; then
        local gitstr="$(__git_ps1 '(%s)')"
        if [ -n "${gitstr}" ]; then
            envs="${envs}# git ${gitcolor}${gitstr}${__c_off} "
        fi
    fi
    if [ -n "${VIRTUAL_ENV:-}" ]; then
        envs="${envs}# pyvenv ${envcolor}$VIRTUAL_ENV${dim}${__c_off} "
    fi
    # --- '# versions'
    if [ -n "$DEBUG" ]; then
        envs="${envs}# DEBUG=${__c_magenta}${DEBUG}${__c_off} "
        if [ -n "${JAVA_HOME:-}" ]; then
            envs="${envs}# ${dim}$(javac -version | head -11)${__c_off} "
        fi
        if [ -n "${M2_HOME:-}" ]; then
            envs="${envs}# ${dim}$(mvn --version | head -1)${__c_off} "
        fi
        if [ -n "${JBOSS_HOME:-}" ]; then
            envs="${envs}# JBoss ${dim}$JBOSS_HOME${__c_off} "
        fi
    fi
    if [ -n "${envs}" ]; then
        PS1="${PS1}${envs}\n"
    fi

    # --- '# user@host:pwd\n'
    PS1="${PS1}# ${usercolor}\u${__c_off}@${usercolor}\h${__c_off}:${pathcolor}\w${__c_off}\n"

    # --- '# time retval \$' # dÃ­k Pane Klobouk ðŸ•‘
    # this is poor man's timer
    local T=${SECONDS}
    local D=$((T/60/60/24))
    local H=$((T/60/60%24))
    local M=$((T/60%60))
    local S=$((T%60))
    SECONDS=0
    PS1="${PS1}# ${timecolor}$(date +'%A %d %T')${__c_off} ${warningcolor}~${__c_off}${D}d,${H}h:${M}m:${S}s "
    if [ $retval -eq 0 ]; then
        PS1="${PS1}${successcolor}âœ“ "
    else
        PS1="${PS1}${failurecolor}âœ— $retval "
    fi
    PS1="${PS1}${prompt}${__c_off} "

    # ... behold prompt!
    #     C:\>_
    export PS1
}

export PROMPT_COMMAND="__ps1_update"

# vim:ft=sh:nowrap
